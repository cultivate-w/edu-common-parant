<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	 xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd" default-autowire="byType">
		
		
		<context:annotation-config />
		<context:component-scan base-package="com.edu"/>
		<context:property-placeholder location="classpath:jdbc.properties,classpath:service.properties"/>
		<bean  id="dataSource"  class="com.alibaba.druid.pool.DruidDataSource" >
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url"  value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
			<!-- 配置初始化大小、最小、最大 -->
		<!-- 通常来说，只需要修改initialSize、minIdle、maxActive -->
		<property name="initialSize" value="2" />
		<property name="minIdle" value="2" />
		<property name="maxActive" value="30" />
		<property name="testWhileIdle" value="false" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="5000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="30000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 解密密码必须要配置的项 -->
		<property name="filters" value="config" />
		<property name="connectionProperties" value="config.decrypt=true" />
		</bean>
		
		<bean   id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
		<property name="dataSource"  ref="dataSource" />
		</bean>
		
		<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="close" >
		<constructor-arg index="0" ref="sqlSessionFactory" />
		</bean>
		  <!-- 配置事务 -->
		<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
		</bean>
		
	    <import resource="dubbo-provider.xml"/> 
		
        <!-- <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.edu.mapper" />
        </bean> -->
   <!--    
        <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
        <tx:method name="add*" propagation="REQUIRED" isolation="REPEATABLE_READ"/>
        <tx:method name="delete*" propagation="REQUIRED" isolation="REPEATABLE_READ"/>
        <tx:method name="update*" propagation="REQUIRED" isolation="REPEATABLE_READ"/>
        <tx:method name="query*" propagation="REQUIRED"  isolation="REPEATABLE_READ" read-only="true"/>
        </tx:attributes>
        </tx:advice> -->
        
     <!--    <aop:config>
        <aop:advisor  advice-ref="txAdvice" pointcut="execution(* com.water.example.service..*.*(..)))"/>
        </aop:config>
    -->
   
</beans>
